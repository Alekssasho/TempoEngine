// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AUDIODATABASE_TEMPEST_DEFINITION_H_
#define FLATBUFFERS_GENERATED_AUDIODATABASE_TEMPEST_DEFINITION_H_

#include "flatbuffers/flatbuffers.h"

namespace Tempest {
namespace Definition {

struct AudioDatabase;
struct AudioDatabaseBuilder;

struct AudioDatabase FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AudioDatabaseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BACKGROUND_MUSIC = 4
  };
  const flatbuffers::Vector<uint8_t> *background_music() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_BACKGROUND_MUSIC);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BACKGROUND_MUSIC) &&
           verifier.VerifyVector(background_music()) &&
           verifier.EndTable();
  }
};

struct AudioDatabaseBuilder {
  typedef AudioDatabase Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_background_music(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> background_music) {
    fbb_.AddOffset(AudioDatabase::VT_BACKGROUND_MUSIC, background_music);
  }
  explicit AudioDatabaseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AudioDatabase> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AudioDatabase>(end);
    return o;
  }
};

inline flatbuffers::Offset<AudioDatabase> CreateAudioDatabase(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> background_music = 0) {
  AudioDatabaseBuilder builder_(_fbb);
  builder_.add_background_music(background_music);
  return builder_.Finish();
}

inline flatbuffers::Offset<AudioDatabase> CreateAudioDatabaseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *background_music = nullptr) {
  auto background_music__ = background_music ? _fbb.CreateVector<uint8_t>(*background_music) : 0;
  return Tempest::Definition::CreateAudioDatabase(
      _fbb,
      background_music__);
}

inline const Tempest::Definition::AudioDatabase *GetAudioDatabase(const void *buf) {
  return flatbuffers::GetRoot<Tempest::Definition::AudioDatabase>(buf);
}

inline const Tempest::Definition::AudioDatabase *GetSizePrefixedAudioDatabase(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Tempest::Definition::AudioDatabase>(buf);
}

inline const char *AudioDatabaseIdentifier() {
  return "TADB";
}

inline bool AudioDatabaseBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, AudioDatabaseIdentifier());
}

inline bool VerifyAudioDatabaseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Tempest::Definition::AudioDatabase>(AudioDatabaseIdentifier());
}

inline bool VerifySizePrefixedAudioDatabaseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Tempest::Definition::AudioDatabase>(AudioDatabaseIdentifier());
}

inline const char *AudioDatabaseExtension() {
  return "tab";
}

inline void FinishAudioDatabaseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tempest::Definition::AudioDatabase> root) {
  fbb.Finish(root, AudioDatabaseIdentifier());
}

inline void FinishSizePrefixedAudioDatabaseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tempest::Definition::AudioDatabase> root) {
  fbb.FinishSizePrefixed(root, AudioDatabaseIdentifier());
}

}  // namespace Definition
}  // namespace Tempest

#endif  // FLATBUFFERS_GENERATED_AUDIODATABASE_TEMPEST_DEFINITION_H_
