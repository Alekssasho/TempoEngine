// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LEVEL_TEMPEST_DEFINITION_H_
#define FLATBUFFERS_GENERATED_LEVEL_TEMPEST_DEFINITION_H_

#include "flatbuffers/flatbuffers.h"

namespace Tempest {
namespace Definition {

struct Vec3;

struct Camera;

struct Level;
struct LevelBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Camera FLATBUFFERS_FINAL_CLASS {
 private:
  float yfov_;
  float znear_;
  float zfar_;
  float aspect_ratio_;
  Tempest::Definition::Vec3 position_;
  Tempest::Definition::Vec3 forward_;
  Tempest::Definition::Vec3 up_;

 public:
  Camera()
      : yfov_(0),
        znear_(0),
        zfar_(0),
        aspect_ratio_(0),
        position_(),
        forward_(),
        up_() {
  }
  Camera(float _yfov, float _znear, float _zfar, float _aspect_ratio, const Tempest::Definition::Vec3 &_position, const Tempest::Definition::Vec3 &_forward, const Tempest::Definition::Vec3 &_up)
      : yfov_(flatbuffers::EndianScalar(_yfov)),
        znear_(flatbuffers::EndianScalar(_znear)),
        zfar_(flatbuffers::EndianScalar(_zfar)),
        aspect_ratio_(flatbuffers::EndianScalar(_aspect_ratio)),
        position_(_position),
        forward_(_forward),
        up_(_up) {
  }
  float yfov() const {
    return flatbuffers::EndianScalar(yfov_);
  }
  float znear() const {
    return flatbuffers::EndianScalar(znear_);
  }
  float zfar() const {
    return flatbuffers::EndianScalar(zfar_);
  }
  float aspect_ratio() const {
    return flatbuffers::EndianScalar(aspect_ratio_);
  }
  const Tempest::Definition::Vec3 &position() const {
    return position_;
  }
  const Tempest::Definition::Vec3 &forward() const {
    return forward_;
  }
  const Tempest::Definition::Vec3 &up() const {
    return up_;
  }
};
FLATBUFFERS_STRUCT_END(Camera, 52);

struct Level FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LevelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ENTITIES = 6,
    VT_PHYSICS_WORLD = 8,
    VT_GEOMETRY_DATABASE_FILE = 10,
    VT_AUDIO_DATABASE_FILE = 12,
    VT_CAMERA = 14
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<uint8_t> *entities() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_ENTITIES);
  }
  const flatbuffers::Vector<uint8_t> *physics_world() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PHYSICS_WORLD);
  }
  const flatbuffers::String *geometry_database_file() const {
    return GetPointer<const flatbuffers::String *>(VT_GEOMETRY_DATABASE_FILE);
  }
  const flatbuffers::String *audio_database_file() const {
    return GetPointer<const flatbuffers::String *>(VT_AUDIO_DATABASE_FILE);
  }
  const Tempest::Definition::Camera *camera() const {
    return GetStruct<const Tempest::Definition::Camera *>(VT_CAMERA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ENTITIES) &&
           verifier.VerifyVector(entities()) &&
           VerifyOffset(verifier, VT_PHYSICS_WORLD) &&
           verifier.VerifyVector(physics_world()) &&
           VerifyOffset(verifier, VT_GEOMETRY_DATABASE_FILE) &&
           verifier.VerifyString(geometry_database_file()) &&
           VerifyOffset(verifier, VT_AUDIO_DATABASE_FILE) &&
           verifier.VerifyString(audio_database_file()) &&
           VerifyField<Tempest::Definition::Camera>(verifier, VT_CAMERA) &&
           verifier.EndTable();
  }
};

struct LevelBuilder {
  typedef Level Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Level::VT_NAME, name);
  }
  void add_entities(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> entities) {
    fbb_.AddOffset(Level::VT_ENTITIES, entities);
  }
  void add_physics_world(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> physics_world) {
    fbb_.AddOffset(Level::VT_PHYSICS_WORLD, physics_world);
  }
  void add_geometry_database_file(flatbuffers::Offset<flatbuffers::String> geometry_database_file) {
    fbb_.AddOffset(Level::VT_GEOMETRY_DATABASE_FILE, geometry_database_file);
  }
  void add_audio_database_file(flatbuffers::Offset<flatbuffers::String> audio_database_file) {
    fbb_.AddOffset(Level::VT_AUDIO_DATABASE_FILE, audio_database_file);
  }
  void add_camera(const Tempest::Definition::Camera *camera) {
    fbb_.AddStruct(Level::VT_CAMERA, camera);
  }
  explicit LevelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Level> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Level>(end);
    return o;
  }
};

inline flatbuffers::Offset<Level> CreateLevel(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> entities = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> physics_world = 0,
    flatbuffers::Offset<flatbuffers::String> geometry_database_file = 0,
    flatbuffers::Offset<flatbuffers::String> audio_database_file = 0,
    const Tempest::Definition::Camera *camera = 0) {
  LevelBuilder builder_(_fbb);
  builder_.add_camera(camera);
  builder_.add_audio_database_file(audio_database_file);
  builder_.add_geometry_database_file(geometry_database_file);
  builder_.add_physics_world(physics_world);
  builder_.add_entities(entities);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Level> CreateLevelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<uint8_t> *entities = nullptr,
    const std::vector<uint8_t> *physics_world = nullptr,
    const char *geometry_database_file = nullptr,
    const char *audio_database_file = nullptr,
    const Tempest::Definition::Camera *camera = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto entities__ = entities ? _fbb.CreateVector<uint8_t>(*entities) : 0;
  auto physics_world__ = physics_world ? _fbb.CreateVector<uint8_t>(*physics_world) : 0;
  auto geometry_database_file__ = geometry_database_file ? _fbb.CreateString(geometry_database_file) : 0;
  auto audio_database_file__ = audio_database_file ? _fbb.CreateString(audio_database_file) : 0;
  return Tempest::Definition::CreateLevel(
      _fbb,
      name__,
      entities__,
      physics_world__,
      geometry_database_file__,
      audio_database_file__,
      camera);
}

inline const Tempest::Definition::Level *GetLevel(const void *buf) {
  return flatbuffers::GetRoot<Tempest::Definition::Level>(buf);
}

inline const Tempest::Definition::Level *GetSizePrefixedLevel(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Tempest::Definition::Level>(buf);
}

inline const char *LevelIdentifier() {
  return "TLDB";
}

inline bool LevelBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, LevelIdentifier());
}

inline bool VerifyLevelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Tempest::Definition::Level>(LevelIdentifier());
}

inline bool VerifySizePrefixedLevelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Tempest::Definition::Level>(LevelIdentifier());
}

inline const char *LevelExtension() {
  return "tlb";
}

inline void FinishLevelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tempest::Definition::Level> root) {
  fbb.Finish(root, LevelIdentifier());
}

inline void FinishSizePrefixedLevelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tempest::Definition::Level> root) {
  fbb.FinishSizePrefixed(root, LevelIdentifier());
}

}  // namespace Definition
}  // namespace Tempest

#endif  // FLATBUFFERS_GENERATED_LEVEL_TEMPEST_DEFINITION_H_
