// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LEVEL_TEMPEST_DEFINITION_H_
#define FLATBUFFERS_GENERATED_LEVEL_TEMPEST_DEFINITION_H_

#include "flatbuffers/flatbuffers.h"

namespace Tempest {
namespace Definition {

struct Level;
struct LevelBuilder;

struct Level FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LevelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ENTITIES = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<uint8_t> *entities() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_ENTITIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ENTITIES) &&
           verifier.VerifyVector(entities()) &&
           verifier.EndTable();
  }
};

struct LevelBuilder {
  typedef Level Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Level::VT_NAME, name);
  }
  void add_entities(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> entities) {
    fbb_.AddOffset(Level::VT_ENTITIES, entities);
  }
  explicit LevelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Level> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Level>(end);
    return o;
  }
};

inline flatbuffers::Offset<Level> CreateLevel(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> entities = 0) {
  LevelBuilder builder_(_fbb);
  builder_.add_entities(entities);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Level> CreateLevelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<uint8_t> *entities = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto entities__ = entities ? _fbb.CreateVector<uint8_t>(*entities) : 0;
  return Tempest::Definition::CreateLevel(
      _fbb,
      name__,
      entities__);
}

inline const Tempest::Definition::Level *GetLevel(const void *buf) {
  return flatbuffers::GetRoot<Tempest::Definition::Level>(buf);
}

inline const Tempest::Definition::Level *GetSizePrefixedLevel(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Tempest::Definition::Level>(buf);
}

inline const char *LevelIdentifier() {
  return "TLDB";
}

inline bool LevelBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, LevelIdentifier());
}

inline bool VerifyLevelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Tempest::Definition::Level>(LevelIdentifier());
}

inline bool VerifySizePrefixedLevelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Tempest::Definition::Level>(LevelIdentifier());
}

inline const char *LevelExtension() {
  return "tlb";
}

inline void FinishLevelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tempest::Definition::Level> root) {
  fbb.Finish(root, LevelIdentifier());
}

inline void FinishSizePrefixedLevelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tempest::Definition::Level> root) {
  fbb.FinishSizePrefixed(root, LevelIdentifier());
}

}  // namespace Definition
}  // namespace Tempest

#endif  // FLATBUFFERS_GENERATED_LEVEL_TEMPEST_DEFINITION_H_
