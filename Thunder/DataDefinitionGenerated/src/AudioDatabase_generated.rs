// automatically generated by the FlatBuffers compiler, do not modify

use std::cmp::Ordering;
use std::mem;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod tempest {

    use std::cmp::Ordering;
    use std::mem;

    extern crate flatbuffers;
    use self::flatbuffers::EndianScalar;
    #[allow(unused_imports, dead_code)]
    pub mod definition {

        use std::cmp::Ordering;
        use std::mem;

        extern crate flatbuffers;
        use self::flatbuffers::EndianScalar;

        pub enum AudioDatabaseOffset {}
        #[derive(Copy, Clone, Debug, PartialEq)]

        pub struct AudioDatabase<'a> {
            pub _tab: flatbuffers::Table<'a>,
        }

        impl<'a> flatbuffers::Follow<'a> for AudioDatabase<'a> {
            type Inner = AudioDatabase<'a>;
            #[inline]
            fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
                Self {
                    _tab: flatbuffers::Table { buf: buf, loc: loc },
                }
            }
        }

        impl<'a> AudioDatabase<'a> {
            #[inline]
            pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
                AudioDatabase { _tab: table }
            }
            #[allow(unused_mut)]
            pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
                _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
                args: &'args AudioDatabaseArgs<'args>,
            ) -> flatbuffers::WIPOffset<AudioDatabase<'bldr>> {
                let mut builder = AudioDatabaseBuilder::new(_fbb);
                if let Some(x) = args.background_music {
                    builder.add_background_music(x);
                }
                builder.finish()
            }

            pub const VT_BACKGROUND_MUSIC: flatbuffers::VOffsetT = 4;

            #[inline]
            pub fn background_music(&self) -> Option<&'a [u8]> {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                        AudioDatabase::VT_BACKGROUND_MUSIC,
                        None,
                    )
                    .map(|v| v.safe_slice())
            }
        }

        pub struct AudioDatabaseArgs<'a> {
            pub background_music: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        }
        impl<'a> Default for AudioDatabaseArgs<'a> {
            #[inline]
            fn default() -> Self {
                AudioDatabaseArgs {
                    background_music: None,
                }
            }
        }
        pub struct AudioDatabaseBuilder<'a: 'b, 'b> {
            fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
            start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
        }
        impl<'a: 'b, 'b> AudioDatabaseBuilder<'a, 'b> {
            #[inline]
            pub fn add_background_music(
                &mut self,
                background_music: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
            ) {
                self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                    AudioDatabase::VT_BACKGROUND_MUSIC,
                    background_music,
                );
            }
            #[inline]
            pub fn new(
                _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
            ) -> AudioDatabaseBuilder<'a, 'b> {
                let start = _fbb.start_table();
                AudioDatabaseBuilder {
                    fbb_: _fbb,
                    start_: start,
                }
            }
            #[inline]
            pub fn finish(self) -> flatbuffers::WIPOffset<AudioDatabase<'a>> {
                let o = self.fbb_.end_table(self.start_);
                flatbuffers::WIPOffset::new(o.value())
            }
        }

        #[inline]
        pub fn get_root_as_audio_database<'a>(buf: &'a [u8]) -> AudioDatabase<'a> {
            flatbuffers::get_root::<AudioDatabase<'a>>(buf)
        }

        #[inline]
        pub fn get_size_prefixed_root_as_audio_database<'a>(buf: &'a [u8]) -> AudioDatabase<'a> {
            flatbuffers::get_size_prefixed_root::<AudioDatabase<'a>>(buf)
        }

        pub const AUDIO_DATABASE_IDENTIFIER: &'static str = "TADB";

        #[inline]
        pub fn audio_database_buffer_has_identifier(buf: &[u8]) -> bool {
            return flatbuffers::buffer_has_identifier(buf, AUDIO_DATABASE_IDENTIFIER, false);
        }

        #[inline]
        pub fn audio_database_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
            return flatbuffers::buffer_has_identifier(buf, AUDIO_DATABASE_IDENTIFIER, true);
        }

        pub const AUDIO_DATABASE_EXTENSION: &'static str = "tab";

        #[inline]
        pub fn finish_audio_database_buffer<'a, 'b>(
            fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
            root: flatbuffers::WIPOffset<AudioDatabase<'a>>,
        ) {
            fbb.finish(root, Some(AUDIO_DATABASE_IDENTIFIER));
        }

        #[inline]
        pub fn finish_size_prefixed_audio_database_buffer<'a, 'b>(
            fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
            root: flatbuffers::WIPOffset<AudioDatabase<'a>>,
        ) {
            fbb.finish_size_prefixed(root, Some(AUDIO_DATABASE_IDENTIFIER));
        }
    } // pub mod Definition
} // pub mod Tempest
