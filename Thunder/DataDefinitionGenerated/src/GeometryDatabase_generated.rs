// automatically generated by the FlatBuffers compiler, do not modify

use std::cmp::Ordering;
use std::mem;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod tempest {

    use std::cmp::Ordering;
    use std::mem;

    extern crate flatbuffers;
    use self::flatbuffers::EndianScalar;
    #[allow(unused_imports, dead_code)]
    pub mod definition {

        use std::cmp::Ordering;
        use std::mem;

        extern crate flatbuffers;
        use self::flatbuffers::EndianScalar;

        pub enum MeshMappingOffset {}
        #[derive(Copy, Clone, Debug, PartialEq)]

        pub struct MeshMapping<'a> {
            pub _tab: flatbuffers::Table<'a>,
        }

        impl<'a> flatbuffers::Follow<'a> for MeshMapping<'a> {
            type Inner = MeshMapping<'a>;
            #[inline]
            fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
                Self {
                    _tab: flatbuffers::Table { buf: buf, loc: loc },
                }
            }
        }

        impl<'a> MeshMapping<'a> {
            #[inline]
            pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
                MeshMapping { _tab: table }
            }
            #[allow(unused_mut)]
            pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
                _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
                args: &'args MeshMappingArgs,
            ) -> flatbuffers::WIPOffset<MeshMapping<'bldr>> {
                let mut builder = MeshMappingBuilder::new(_fbb);
                builder.add_vertex_count(args.vertex_count);
                builder.add_vertex_offset(args.vertex_offset);
                builder.add_index(args.index);
                builder.finish()
            }

            pub const VT_INDEX: flatbuffers::VOffsetT = 4;
            pub const VT_VERTEX_OFFSET: flatbuffers::VOffsetT = 6;
            pub const VT_VERTEX_COUNT: flatbuffers::VOffsetT = 8;

            #[inline]
            pub fn index(&self) -> u32 {
                self._tab
                    .get::<u32>(MeshMapping::VT_INDEX, Some(0))
                    .unwrap()
            }
            #[inline]
            pub fn key_compare_less_than(&self, o: &MeshMapping) -> bool {
                self.index() < o.index()
            }

            #[inline]
            pub fn key_compare_with_value(&self, val: u32) -> ::std::cmp::Ordering {
                let key = self.index();
                key.cmp(&val)
            }
            #[inline]
            pub fn vertex_offset(&self) -> u32 {
                self._tab
                    .get::<u32>(MeshMapping::VT_VERTEX_OFFSET, Some(0))
                    .unwrap()
            }
            #[inline]
            pub fn vertex_count(&self) -> u32 {
                self._tab
                    .get::<u32>(MeshMapping::VT_VERTEX_COUNT, Some(0))
                    .unwrap()
            }
        }

        pub struct MeshMappingArgs {
            pub index: u32,
            pub vertex_offset: u32,
            pub vertex_count: u32,
        }
        impl<'a> Default for MeshMappingArgs {
            #[inline]
            fn default() -> Self {
                MeshMappingArgs {
                    index: 0,
                    vertex_offset: 0,
                    vertex_count: 0,
                }
            }
        }
        pub struct MeshMappingBuilder<'a: 'b, 'b> {
            fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
            start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
        }
        impl<'a: 'b, 'b> MeshMappingBuilder<'a, 'b> {
            #[inline]
            pub fn add_index(&mut self, index: u32) {
                self.fbb_.push_slot::<u32>(MeshMapping::VT_INDEX, index, 0);
            }
            #[inline]
            pub fn add_vertex_offset(&mut self, vertex_offset: u32) {
                self.fbb_
                    .push_slot::<u32>(MeshMapping::VT_VERTEX_OFFSET, vertex_offset, 0);
            }
            #[inline]
            pub fn add_vertex_count(&mut self, vertex_count: u32) {
                self.fbb_
                    .push_slot::<u32>(MeshMapping::VT_VERTEX_COUNT, vertex_count, 0);
            }
            #[inline]
            pub fn new(
                _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
            ) -> MeshMappingBuilder<'a, 'b> {
                let start = _fbb.start_table();
                MeshMappingBuilder {
                    fbb_: _fbb,
                    start_: start,
                }
            }
            #[inline]
            pub fn finish(self) -> flatbuffers::WIPOffset<MeshMapping<'a>> {
                let o = self.fbb_.end_table(self.start_);
                flatbuffers::WIPOffset::new(o.value())
            }
        }

        pub enum GeometryDatabaseOffset {}
        #[derive(Copy, Clone, Debug, PartialEq)]

        pub struct GeometryDatabase<'a> {
            pub _tab: flatbuffers::Table<'a>,
        }

        impl<'a> flatbuffers::Follow<'a> for GeometryDatabase<'a> {
            type Inner = GeometryDatabase<'a>;
            #[inline]
            fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
                Self {
                    _tab: flatbuffers::Table { buf: buf, loc: loc },
                }
            }
        }

        impl<'a> GeometryDatabase<'a> {
            #[inline]
            pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
                GeometryDatabase { _tab: table }
            }
            #[allow(unused_mut)]
            pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
                _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
                args: &'args GeometryDatabaseArgs<'args>,
            ) -> flatbuffers::WIPOffset<GeometryDatabase<'bldr>> {
                let mut builder = GeometryDatabaseBuilder::new(_fbb);
                if let Some(x) = args.mappings {
                    builder.add_mappings(x);
                }
                if let Some(x) = args.vertex_buffer {
                    builder.add_vertex_buffer(x);
                }
                builder.finish()
            }

            pub const VT_VERTEX_BUFFER: flatbuffers::VOffsetT = 4;
            pub const VT_MAPPINGS: flatbuffers::VOffsetT = 6;

            #[inline]
            pub fn vertex_buffer(&self) -> Option<&'a [u8]> {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                        GeometryDatabase::VT_VERTEX_BUFFER,
                        None,
                    )
                    .map(|v| v.safe_slice())
            }
            #[inline]
            pub fn mappings(
                &self,
            ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MeshMapping<'a>>>>
            {
                self._tab.get::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<flatbuffers::ForwardsUOffset<MeshMapping<'a>>>,
                >>(GeometryDatabase::VT_MAPPINGS, None)
            }
        }

        pub struct GeometryDatabaseArgs<'a> {
            pub vertex_buffer: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
            pub mappings: Option<
                flatbuffers::WIPOffset<
                    flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MeshMapping<'a>>>,
                >,
            >,
        }
        impl<'a> Default for GeometryDatabaseArgs<'a> {
            #[inline]
            fn default() -> Self {
                GeometryDatabaseArgs {
                    vertex_buffer: None,
                    mappings: None,
                }
            }
        }
        pub struct GeometryDatabaseBuilder<'a: 'b, 'b> {
            fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
            start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
        }
        impl<'a: 'b, 'b> GeometryDatabaseBuilder<'a, 'b> {
            #[inline]
            pub fn add_vertex_buffer(
                &mut self,
                vertex_buffer: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
            ) {
                self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                    GeometryDatabase::VT_VERTEX_BUFFER,
                    vertex_buffer,
                );
            }
            #[inline]
            pub fn add_mappings(
                &mut self,
                mappings: flatbuffers::WIPOffset<
                    flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<MeshMapping<'b>>>,
                >,
            ) {
                self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                    GeometryDatabase::VT_MAPPINGS,
                    mappings,
                );
            }
            #[inline]
            pub fn new(
                _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
            ) -> GeometryDatabaseBuilder<'a, 'b> {
                let start = _fbb.start_table();
                GeometryDatabaseBuilder {
                    fbb_: _fbb,
                    start_: start,
                }
            }
            #[inline]
            pub fn finish(self) -> flatbuffers::WIPOffset<GeometryDatabase<'a>> {
                let o = self.fbb_.end_table(self.start_);
                flatbuffers::WIPOffset::new(o.value())
            }
        }

        #[inline]
        pub fn get_root_as_geometry_database<'a>(buf: &'a [u8]) -> GeometryDatabase<'a> {
            flatbuffers::get_root::<GeometryDatabase<'a>>(buf)
        }

        #[inline]
        pub fn get_size_prefixed_root_as_geometry_database<'a>(
            buf: &'a [u8],
        ) -> GeometryDatabase<'a> {
            flatbuffers::get_size_prefixed_root::<GeometryDatabase<'a>>(buf)
        }

        pub const GEOMETRY_DATABASE_IDENTIFIER: &'static str = "TGDB";

        #[inline]
        pub fn geometry_database_buffer_has_identifier(buf: &[u8]) -> bool {
            return flatbuffers::buffer_has_identifier(buf, GEOMETRY_DATABASE_IDENTIFIER, false);
        }

        #[inline]
        pub fn geometry_database_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
            return flatbuffers::buffer_has_identifier(buf, GEOMETRY_DATABASE_IDENTIFIER, true);
        }

        pub const GEOMETRY_DATABASE_EXTENSION: &'static str = "tgb";

        #[inline]
        pub fn finish_geometry_database_buffer<'a, 'b>(
            fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
            root: flatbuffers::WIPOffset<GeometryDatabase<'a>>,
        ) {
            fbb.finish(root, Some(GEOMETRY_DATABASE_IDENTIFIER));
        }

        #[inline]
        pub fn finish_size_prefixed_geometry_database_buffer<'a, 'b>(
            fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
            root: flatbuffers::WIPOffset<GeometryDatabase<'a>>,
        ) {
            fbb.finish_size_prefixed(root, Some(GEOMETRY_DATABASE_IDENTIFIER));
        }
    } // pub mod Definition
} // pub mod Tempest
