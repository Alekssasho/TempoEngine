// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod tempest {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;
#[allow(unused_imports, dead_code)]
pub mod definition {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(i8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum ShaderType {
  Vertex = 0,
  Pixel = 1,

}

pub const ENUM_MIN_SHADER_TYPE: i8 = 0;
pub const ENUM_MAX_SHADER_TYPE: i8 = 1;

impl<'a> flatbuffers::Follow<'a> for ShaderType {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for ShaderType {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = i8::to_le(self as i8);
    let p = &n as *const i8 as *const ShaderType;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = i8::from_le(self as i8);
    let p = &n as *const i8 as *const ShaderType;
    unsafe { *p }
  }
}

impl flatbuffers::Push for ShaderType {
    type Output = ShaderType;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<ShaderType>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SHADER_TYPE:[ShaderType; 2] = [
  ShaderType::Vertex,
  ShaderType::Pixel
];

#[allow(non_camel_case_types)]
pub const ENUM_NAMES_SHADER_TYPE:[&'static str; 2] = [
    "Vertex",
    "Pixel"
];

pub fn enum_name_shader_type(e: ShaderType) -> &'static str {
  let index = e as i8;
  ENUM_NAMES_SHADER_TYPE[index as usize]
}

pub enum ShaderOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Shader<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Shader<'a> {
    type Inner = Shader<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Shader<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Shader {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ShaderArgs<'args>) -> flatbuffers::WIPOffset<Shader<'bldr>> {
      let mut builder = ShaderBuilder::new(_fbb);
      if let Some(x) = args.Code { builder.add_Code(x); }
      if let Some(x) = args.Name { builder.add_Name(x); }
      builder.add_Type(args.Type);
      builder.finish()
    }

    pub const VT_NAME: flatbuffers::VOffsetT = 4;
    pub const VT_TYPE: flatbuffers::VOffsetT = 6;
    pub const VT_CODE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn Name(&self) -> &'a str {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Shader::VT_NAME, None).unwrap()
  }
  #[inline]
  pub fn key_compare_less_than(&self, o: &Shader) ->  bool {
    self.Name() < o.Name()
  }

  #[inline]
  pub fn key_compare_with_value(&self, val: & str) ->  ::std::cmp::Ordering {
    let key = self.Name();
    key.cmp(&val)
  }
  #[inline]
  pub fn Type(&self) -> ShaderType {
    self._tab.get::<ShaderType>(Shader::VT_TYPE, Some(ShaderType::Vertex)).unwrap()
  }
  #[inline]
  pub fn Code(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Shader::VT_CODE, None).map(|v| v.safe_slice())
  }
}

pub struct ShaderArgs<'a> {
    pub Name: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub Type: ShaderType,
    pub Code: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
}
impl<'a> Default for ShaderArgs<'a> {
    #[inline]
    fn default() -> Self {
        ShaderArgs {
            Name: None, // required field
            Type: ShaderType::Vertex,
            Code: None,
        }
    }
}
pub struct ShaderBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ShaderBuilder<'a, 'b> {
  #[inline]
  pub fn add_Name(&mut self, Name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Shader::VT_NAME, Name);
  }
  #[inline]
  pub fn add_Type(&mut self, Type: ShaderType) {
    self.fbb_.push_slot::<ShaderType>(Shader::VT_TYPE, Type, ShaderType::Vertex);
  }
  #[inline]
  pub fn add_Code(&mut self, Code: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Shader::VT_CODE, Code);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ShaderBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ShaderBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Shader<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Shader::VT_NAME,"name");
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum ShaderLibraryOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct ShaderLibrary<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ShaderLibrary<'a> {
    type Inner = ShaderLibrary<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> ShaderLibrary<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ShaderLibrary {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ShaderLibraryArgs<'args>) -> flatbuffers::WIPOffset<ShaderLibrary<'bldr>> {
      let mut builder = ShaderLibraryBuilder::new(_fbb);
      if let Some(x) = args.Shaders { builder.add_Shaders(x); }
      builder.finish()
    }

    pub const VT_SHADERS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn Shaders(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Shader<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<Shader<'a>>>>>(ShaderLibrary::VT_SHADERS, None)
  }
}

pub struct ShaderLibraryArgs<'a> {
    pub Shaders: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<Shader<'a >>>>>,
}
impl<'a> Default for ShaderLibraryArgs<'a> {
    #[inline]
    fn default() -> Self {
        ShaderLibraryArgs {
            Shaders: None,
        }
    }
}
pub struct ShaderLibraryBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ShaderLibraryBuilder<'a, 'b> {
  #[inline]
  pub fn add_Shaders(&mut self, Shaders: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Shader<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShaderLibrary::VT_SHADERS, Shaders);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ShaderLibraryBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ShaderLibraryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ShaderLibrary<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_shader_library<'a>(buf: &'a [u8]) -> ShaderLibrary<'a> {
  flatbuffers::get_root::<ShaderLibrary<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_shader_library<'a>(buf: &'a [u8]) -> ShaderLibrary<'a> {
  flatbuffers::get_size_prefixed_root::<ShaderLibrary<'a>>(buf)
}

pub const SHADER_LIBRARY_IDENTIFIER: &'static str = "TSLB";

#[inline]
pub fn shader_library_buffer_has_identifier(buf: &[u8]) -> bool {
  return flatbuffers::buffer_has_identifier(buf, SHADER_LIBRARY_IDENTIFIER, false);
}

#[inline]
pub fn shader_library_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  return flatbuffers::buffer_has_identifier(buf, SHADER_LIBRARY_IDENTIFIER, true);
}

pub const SHADER_LIBRARY_EXTENSION: &'static str = "tslb";

#[inline]
pub fn finish_shader_library_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ShaderLibrary<'a>>) {
  fbb.finish(root, Some(SHADER_LIBRARY_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_shader_library_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<ShaderLibrary<'a>>) {
  fbb.finish_size_prefixed(root, Some(SHADER_LIBRARY_IDENTIFIER));
}
}  // pub mod Definition
}  // pub mod Tempest

